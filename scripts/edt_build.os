// BSLLS:IncorrectUseOfStrTemplate-off

#Использовать ibcmdrunner
#Использовать gitrunner
#Использовать logos
#Использовать messenger
#Использовать yaml

Перем ПараметрыСкрипта;

Перем ВерсияПлатформы;
Перем ВременныйКаталог;
Перем СведенияОКонфигурации;
Перем СведенияОРасширениях;
Перем КаталогПроекта;
Перем КаталогРелизов;
Перем КаталогФайловВыгрузки;
Перем Лог;
Перем ВрИмяФайлаЛога;

Процедура ВыполнитьВыгрузкуПроектаВФайлы()
    
    ВремяНачала = Формат(ТекущаяДата(), "ДТ");
    Лог.Информация(СтрШаблон("Начало выгрузки файлов проекта EDT в файлы конфигураций: %1", ВремяНачала));

    КаталогРабочейОбласти = ОбъединитьПути(ВременныйКаталог, "workspace");
    КаталогФайловВыгрузки = ОбъединитьПути(ВременныйКаталог, "unload_xml");
    
    ПутьДоИсполнителя = ПолучитьПеременнуюСреды("ONEC_EDTCLI_PATH");
    
    КомандыВыполнения = Новый Массив;

    ШаблонИсполненияКоманды = "%1 -data %2 -command export --project %3 --configuration-files %4";
    
    // Основная конфигурация
    СведенияОКонфигурации.Вставить("КаталогВыгрузкиXML", 
        ОбъединитьПути(КаталогФайловВыгрузки, СведенияОКонфигурации.ИмяФормированияПути));
    КомандыВыполнения.Добавить(
            СтрШаблон(ШаблонИсполненияКоманды,
                ПутьДоИсполнителя,                               // -- путь к исполняемому 1cedtcli
                КаталогРабочейОбласти,                           // -- путь до рабочей области    
                СведенияОКонфигурации.ПутьВнутриПроекта,         // -- путь до проекта основной конфигурации
                СведенияОКонфигурации.КаталогВыгрузкиXML));      // -- путь до каталога файлов выгрузки

    // Расширения
    Для Каждого ОписаниеРасширения Из СведенияОРасширениях Цикл
        ОписаниеРасширения.Вставить("КаталогВыгрузкиXML",
            ОбъединитьПути(КаталогФайловВыгрузки, ОписаниеРасширения.ИмяФормированияПути));
        КомандыВыполнения.Добавить(
            СтрШаблон(ШаблонИсполненияКоманды,
                ПутьДоИсполнителя,                               // -- путь к исполняемому 1cedtcli
                КаталогРабочейОбласти,                           // -- путь до рабочей области    
                ОписаниеРасширения.ПутьВнутриПроекта,            // -- путь до проекта основной конфигурации
                ОписаниеРасширения.КаталогВыгрузкиXML));         // -- путь до каталога файлов выгрузки    
    КонецЦикла;

    Для Каждого КомандаВыполнения Из КомандыВыполнения Цикл
        Команда = Новый Команда();
        Команда.ПоказыватьВыводНемедленно(Ложь);
        Команда.УстановитьСтрокуЗапуска(КомандаВыполнения);
        Команда.УстановитьИсполнениеЧерезКомандыСистемы(Истина);
        КодВозврата = Команда.Исполнить();
        Если НЕ КодВозврата = 0 Тогда
            ВыводКоманды = Команда.ПолучитьВывод();
            Лог.Ошибка("НЕ УДАЛОСЬ ВЫПОЛНИТЬ ЭКСПОРТ EDT: " + ВыводКоманды);
            ВызватьИсключение ВыводКоманды;
        КонецЕсли;
    КонецЦикла;

    ВремяОкончания = Формат(ТекущаяДата(), "ДТ");
    Лог.Информация(СтрШаблон("Окончание выгрузки файлов проекта EDT в файлы конфигураций: %1", ВремяОкончания));

КонецПроцедуры

Процедура ВыполнитьСборкуИзИсходников()
    
    ВремяНачала = Формат(ТекущаяДата(), "ДТ");
    Лог.Информация(СтрШаблон("Начало сборки файлов конфигурации из исходников: %1", ВремяНачала));

    КаталогИБ = ОбъединитьПути(ВременныйКаталог, "db_temp");
    СоздатьКаталог(КаталогИБ);

    Лог.Информация("Создан каталог временной ИБ: " + КаталогИБ);
    
    УправлениеИБ = Новый УправлениеИБ(ВерсияПлатформы);
    УправлениеИБ.УстановитьПараметрыФайловойИБ(КаталогИБ);
    Если НайтиФайлы(КаталогИБ, "*.1CD").Количество() = 0 Тогда
        Лог.Информация("ИБ не найдена. Создается ИБ с параметром загрузки файлов основной конфигурации по пути: " + КаталогИБ);
        УправлениеИБ.СоздатьИБИзФайловКонфигурации(СведенияОКонфигурации.КаталогВыгрузкиXML);
    Иначе
        Лог.Информация("ИБ найдена. Выполняется загрузка файлов в ИБ: " + КаталогИБ);
        УправлениеИБ.ЗагрузитьКонфигурациюИзФайлов(СведенияОКонфигурации.КаталогВыгрузкиXML);
    КонецЕсли;

    КаталогРелиза = ОбъединитьПути(КаталогРелизов, "main");
    СоздатьКаталог(КаталогРелиза);

    ИмяФайлаВыгрузкиОсновнойКонфигурации = ОбъединитьПути(КаталогРелиза, "1cv8.cf");
    Лог.Информация("Начало выгрузки .cf в файл: " + ИмяФайлаВыгрузкиОсновнойКонфигурации);
    УправлениеИБ.ВыгрузитьКонфигурациюВФайл(ИмяФайлаВыгрузкиОсновнойКонфигурации);

    КаталогРелиза = ОбъединитьПути(КаталогРелизов, "ext");
    СоздатьКаталог(КаталогРелиза);
    Для Каждого ОписаниеРасширения Из СведенияОРасширениях Цикл
        ИмяРасширения = ОписаниеРасширения.Имя;
        ИмяФайлаРелиза = ОбъединитьПути(КаталогРелиза, СтрШаблон("%1.cfe", ОписаниеРасширения.Имя));
        Лог.Информация(СтрШаблон("Начало загрузки расширения %1 из файлов", ИмяРасширения));    
        УправлениеИБ.ЗагрузитьКонфигурациюИзФайлов(ОписаниеРасширения.КаталогВыгрузкиXML,
            ИмяРасширения);
        Лог.Информация(СтрШаблон("Начало выгрузки расширения %1 в .cfe: %2", ИмяРасширения, ИмяФайлаРелиза));    
        УправлениеИБ.ВыгрузитьКонфигурациюВФайл(ИмяФайлаРелиза, 
            ИмяРасширения);   
    КонецЦикла;

    ВремяОкончания = Формат(ТекущаяДата(), "ДТ");
    Лог.Информация(СтрШаблон("Окончание сборки файлов конфигурации из исходников: %1", ВремяОкончания));

КонецПроцедуры

// Проверяет установленные переменные среды (для целей отладки)
// Если переменная не установлена, выполняем установкой по текущей локальной конфигурации
// TODO: переопределить на .env, .yml или др. файл для объявления
Процедура ПроверитьУстановитьПеременныеСреды()

    Лог.Информация("Устанавливаются переменные среды");
    
    Переменные = Новый Соответствие;
    
    // variables from ci
    Переменные.Вставить("RELEASES_DIR", "/home/nikita/1C/EDT/releases"); // -- каталог для артифактов
    
    // variables from runner
    Переменные.Вставить("CI_PROJECT_DIR", "/home/nikita/git/trade11"); // -- каталог локального git проекта
    Переменные.Вставить("ONEC_VERSION", "8.3.26.1656"); // -- версия платформы
    Переменные.Вставить("ONEC_EDTCLI_PATH", "/opt/1C/1CE/components/1c-edt-2024.2.6+7-x86_64/1cedtcli");

    Для Каждого КлючИЗначение Из Переменные Цикл
        ЗначениеПеременной = ПолучитьПеременнуюСреды(КлючИЗначение.Ключ);
        Если ЗначениеПеременной = Неопределено Тогда
            Лог.Информация(СтрШаблон("Переменная среды %1 не была установлена", КлючИЗначение.Ключ));
            УстановитьПеременнуюСреды(КлючИЗначение.Ключ, КлючИЗначение.Значение);
        КонецЕсли;
    КонецЦикла;

    // Объявить локальные переменные
    ВерсияПлатформы = ПолучитьПеременнуюСреды("ONEC_VERSION");
    КаталогПроекта = ПолучитьПеременнуюСреды("CI_PROJECT_DIR");    
    КаталогРелизов = ПолучитьПеременнуюСреды("RELEASES_DIR");

КонецПроцедуры

Процедура ВыполнитьСборкуКонфигурацийEDT()
    
    Попытка
        
        ИнициализироватьНачалоВыполнения();
        ПроверитьУстановитьПеременныеСреды();  
        УстановитьСведенияОКонфигурацииИРасширениях();
        ВыполнитьВыгрузкуПроектаВФайлы();
        ВыполнитьСборкуИзИсходников();
        ЗавершитьВыполнение();

    Исключение

        ТекстОшибки = СтрШаблон("Не удалось выполнить этап сборки: %1", ОписаниеОшибки());
        ОтправитьСообщениеВTelegram(ТекстОшибки);
        ЗавершитьРаботу(1);

    КонецПопытки;

КонецПроцедуры

Процедура ЗавершитьВыполнение()

    ВремяНачала = Формат(ТекущаяДата(), "ДТ");
    Лог.Информация("%1: Этап сборки завершен успешно", ВремяНачала);

    Лог.Закрыть();
    КопироватьФайл(ВрИмяФайлаЛога, ОбъединитьПути(КаталогРелизов, "oscript.build.log"));
    
    УдалитьФайлы(ВременныйКаталог);

    ЗавершитьРаботу(0);

КонецПроцедуры

Процедура ИнициализироватьНачалоВыполнения()
 
    ВременныйКаталог = ОбъединитьПути(КаталогВременныхФайлов(), "onec_build");
    СоздатьКаталог(ВременныйКаталог);

    КаталогЛогов = ОбъединитьПути(ВременныйКаталог, "log");
    СоздатьКаталог(КаталогЛогов);

    ВрИмяФайлаЛога = ОбъединитьПути(КаталогЛогов, "oscript.build.log");
    
    Лог = Логирование.ПолучитьЛог("oscript.build.messages");
    ФайлЖурнала = Новый ВыводЛогаВФайл;
    ФайлЖурнала.ОткрытьФайл(ВрИмяФайлаЛога);
    Лог.ДобавитьСпособВывода(ФайлЖурнала);
    
КонецПроцедуры

Процедура УстановитьСведенияОКонфигурацииИРасширениях()

    СведенияОКонфигурации = Новый Структура;
    СведенияОКонфигурации.Вставить("ИмяФормированияПути", "main");
    СведенияОКонфигурации.Вставить("ПутьВнутриПроекта", ОбъединитьПути(КаталогПроекта, "main/Информационная_база"));
    
    СведенияОРасширениях = Новый Массив;
    ОписаниеРасширения = Новый Структура();
    ОписаниеРасширения.Вставить("Имя", "bit_ДоработкиАдаптация");
    ОписаниеРасширения.Вставить("ИмяФормированияПути", "bit_ДоработкиАдаптация");
    ОписаниеРасширения.Вставить("ПутьВнутриПроекта", ОбъединитьПути(КаталогПроекта, "ext/bitDA/Информационная_база.bit_ДоработкиАдаптация"));
    СведенияОРасширениях.Добавить(ОписаниеРасширения);
    
КонецПроцедуры

Процедура ОтправитьСообщениеВTelegram(ТекстСообщения)
    
    ПараметрыТелеграм = ПараметрыСкрипта.Получить("ПараметрыТелеграм");
	Если ПараметрыТелеграм = Неопределено Тогда
		Возврат;
	КонецЕсли;

	BotID = ПараметрыТелеграм.Получить("BotID");
	IDЧатов = ПараметрыТелеграм.Получить("IDЧатов");

	Если BotID <> Неопределено И IDЧатов <> Неопределено Тогда 
		Мессенджер = Новый Мессенджер();
		Мессенджер.ИнициализироватьТранспорт("telegram", Новый Структура("Логин", BotID));

		Для каждого ID Из IDЧатов Цикл 
			Мессенджер.ОтправитьСообщение("telegram", ID, ТекстСообщения);
		КонецЦикла;
	
	КонецЕсли;

КонецПроцедуры

Функция ПолучитьТекстИзФайла(Знач ИмяФайла)
    
    ФайлОбмена = Новый Файл(ИмяФайла);
    ПрочитанныйТекст = "";
    
	Если ФайлОбмена.Существует() Тогда
        ЧтениеТекста = Новый ЧтениеТекста(ИмяФайла, КодировкаТекста.UTF8);
        ПрочитанныйТекст = ЧтениеТекста.Прочитать();
        ЧтениеТекста.Закрыть();
    Иначе
        Возврат Ложь;
    КонецЕсли;

    Возврат ПрочитанныйТекст;
    
КонецФункции

Парсер = Новый ПарсерYAML;
ПараметрыСкрипта = Парсер.ПрочитатьYaml(ПолучитьТекстИзФайла(СтартовыйСценарий().Каталог + "/params.yaml"));

ВыполнитьСборкуКонфигурацийEDT();
